# Generated by Django 4.1.1 on 2022-11-20 10:32

import catalogue.validators
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Part",
            fields=[
                (
                    "part_number",
                    models.CharField(
                        max_length=50,
                        primary_key=True,
                        serialize=False,
                        validators=[catalogue.validators.part_number_validator],
                    ),
                ),
                (
                    "part_name",
                    models.CharField(
                        max_length=125, null=True, verbose_name="Part name"
                    ),
                ),
                (
                    "price",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=0.01,
                                message="Price has to be greater then 0.01.",
                            )
                        ],
                        verbose_name="Price",
                    ),
                ),
                (
                    "discount_price",
                    models.FloatField(
                        blank=True,
                        default=1,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(limit_value=0.01),
                            django.core.validators.MaxValueValidator(limit_value=1),
                        ],
                        verbose_name="Discount",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Part adding date"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        default="part_photos/empty_part_image.png",
                        null=True,
                        upload_to="part_photos/%Y/%m/%d/",
                        verbose_name="Image",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "stock_quantity",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "machine_system",
                    models.IntegerField(
                        choices=[
                            (1, "Engine"),
                            (2, "Transmission"),
                            (3, "Hydraulic"),
                            (4, "Steering and brake"),
                            (5, "Electric"),
                            (6, "Electronic"),
                            (7, "Chassis"),
                            (8, "Other"),
                            (9, "Cab"),
                            (10, "AMS"),
                            (11, "Maintenance"),
                            (12, "Axles"),
                        ],
                        default=1,
                        verbose_name="Machine type",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MachineModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model", models.CharField(max_length=15, verbose_name="Model")),
                (
                    "machine_type",
                    models.IntegerField(
                        choices=[
                            (1, "Tractor"),
                            (2, "Combine"),
                            (3, "Self-propelled sprayer"),
                            (4, "Self-propelled forage combine"),
                            (5, "Loader"),
                        ],
                        default=1,
                        verbose_name="Machine type",
                    ),
                ),
                (
                    "part",
                    models.ManyToManyField(
                        related_name="machine_model", to="catalogue.part"
                    ),
                ),
            ],
        ),
    ]
